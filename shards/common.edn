(def rpc-server "http://127.0.0.1:9933")
(def runtime-spec-version 2)
(def transaction-version 1)
(def sudo-index 7)
(def sudo-call 0)
;; Index of the Protos Pallet
(def protos-index 11)
(def add-upload-auth-index 0)
;; Index of the Upload Function in Protos Pallet
(def upload-index 0)
;; Index of the Patch Function in Protos Pallet
(def patch-index 1)
;; Index of the Set Metadata Function in Protos Pallet
(def set-metadata-index 3)
;; Index of the Detach Function in Protos Pallet
(def detach-index 4)

(defmesh root)

(defloop wait-port
  (Setup
   100 >= .tries)
  (Maybe (->
          {"id" 1 "jsonrpc" "2.0" "method" "chain_getBlockHash" "params" [0]} (ToJson) (Http.Post rpc-server)
          (FromJson) (ExpectTable) (Take "result") (ExpectString) (Log)
          (Stop))
         (->
          (Math.Dec .tries)
          (Pause 2.0)))
  .tries (Assert.IsNot 0)
  (Log "Waiting for port"))

(defwire make-calldata
  (| (Take 0) (ExpectInt) = .pallet-idx)
  (| (Take 1) (ExpectInt) = .call-idx)
  ; >= copy to allow nesting
  (| (Take 2) (ExpectBytes) >= .args)
  ; call payload to be signed
  ; [module-index call-index] (Check Metadata)
  [.pallet-idx .call-idx] (Substrate.Encode ["u8" "u8"]) >= .call-data
  .args (AppendTo .call-data)
  .call-data)

(defwire send-signed-extrinsic
  (| (Take 0) (ExpectString) = .private-key)
  (| (Take 1) (ExpectBytes) = .call-data)
  (| (Take 2) (ExpectInt) = .nonce)

   ; signer
  .private-key (Sr25519.PublicKey) (Substrate.AccountId) (Log) = .pub-key
  ; multiaddress enum
  [0 .pub-key] (Substrate.Encode ["u8" "a"]) = .signer

  ; extra data to be signed
  ; [era nonce weight]
  ; use 0 u8 for era to have an immortal transaction
  [0 .nonce 0] (Substrate.Encode ["u8" "c" "c"]) = .extra-data

  ; TODO, this should be a CONSTANT actually
  {"id" 1 "jsonrpc" "2.0" "method" "chain_getBlockHash" "params" [0]} (ToJson) (Http.Post rpc-server)
  (FromJson) (ExpectTable) (Take "result") (ExpectString) (Log) (HexToBytes) (Log) = .node-genesis-hash

  ; additional data to be signed
  ; [runtime-spec-version transaction-version genesis-hash genesis-or-current-hash]
  [runtime-spec-version transaction-version] (Substrate.Encode ["u32" "u32"]) >= .additional-data
  .node-genesis-hash (AppendTo .additional-data) (AppendTo .additional-data) ; twice

  .call-data >= .signed-payload
  .extra-data (AppendTo .signed-payload)
  .additional-data (AppendTo .signed-payload)
  (Count .signed-payload)
  (If (IsMore 256)
      (-> (Msg "LONG PAYLOAD") .signed-payload (Hash.Blake2-256))
      (-> .signed-payload)) ; use hashed version if longer bigger than 256
  (Sr25519.Sign .private-key) (Log "Signature bytes") >= .signature
  ; add enum index 1
  "0x01" (HexToBytes) (PrependTo .signature)
  .signature (ToHex) (Log "Signature")

  [0x84] (Substrate.Encode ["u8"]) >= .rpc-data
  .signer (AppendTo .rpc-data)
  .signature (AppendTo .rpc-data)
  .extra-data (AppendTo .rpc-data)
  .call-data (AppendTo .rpc-data)
  [.rpc-data] (Substrate.Encode [nil]) (ToHex) = .rpc-data-hex
  (| (ToBytes) (Log "rpc hex (pointer)")) ; the rpc hex for an image is so long it crashes the terminal! (so I am only only printing the memory address)
  {"id" 1 "jsonrpc" "2.0" "method" "author_submitExtrinsic" "params" [.rpc-data-hex]} (ToJson) (Http.Post rpc-server)
  (Log "HTTP Response is")
  (FromJson))

(defwire make-test-asset
  (ToString) (StringToBytes)
  ;; >= .test-asset-n
  ;; "Test Asset " (PrependTo .test-asset-n)
  ;; .test-asset-n (Log "asset content")
  ;; [.test-asset-n] (Substrate.Encode [nil]) >= .test-asset-payload ; name
  ;; "0x00" (HexToBytes) (AppendTo .test-asset-payload) ; 0 len description
  ;; "0x00" (HexToBytes) (AppendTo .test-asset-payload) ; 0 len attributes
  ;; "0x00" (HexToBytes) (AppendTo .test-asset-payload) ; None preview
  ;; ["0"] (Substrate.Encode ["u8"]) (AppendTo .test-asset-payload) ; 0 enum index = Edn
  ;; "(println \"" >= .test-asset-edn
  ;; .test-asset-n (AppendTo .test-asset-edn)
  ;; "\")" (AppendTo .test-asset-edn)
  ;; [.test-asset-edn] (Substrate.Encode [nil]) (AppendTo .test-asset-payload)
  ;; .test-asset-payload
  )

(defwire test-set-metadata
  (| (Take 0) (ExpectString) = .frag-owner)
  (| (Take 1) (ExpectBytes) = .frag-hash)
  (| (Take 2) (ExpectBytes) = .data)
  (| (Take 3) (ExpectString) = .metadata-key)
  (| (Take 4) (ExpectInt) = .set-metadata-nonce)
  (| (Take 5) (ExpectInt) = .frag-nonce)

  .data (Hash.Blake2-256) >= .data-cid
  
  .frag-hash >= .payload
  [.metadata-key] (Substrate.Encode [nil]) (AppendTo .payload)
  [.data] (Substrate.Encode [nil]) (AppendTo .payload)

  ;; .payload is the arguments of the set_metadata extrinsic
  [protos-index set-metadata-index .payload] (Do make-calldata) = .set-metadata-call (Log "set-metadata-call")
  [.frag-owner .set-metadata-call .set-metadata-nonce] (Do send-signed-extrinsic) (Log "set-metadata-call-result")

  ;; to compose the V1 Cid, add this prefix to the proto hash: (str "z" (base58 "0x0155a0e40220"))
  "0x0155a0e40220" (HexToBytes) (PrependTo .data-cid)
  .data-cid (ToBase58) >= .data-cid-str
  "z" (PrependTo .data-cid-str)
  .data-cid-str (Log "Metadata CID")

  .data-cid-str)

(defwire test-upload-compressing
  (| (Take 0) (ExpectBytes) = .upload-data)
  (| (Take 1) (ExpectInt) = .upload-nonce)
  (| (Take 2) (ExpectInt) = .frag-nonce)

  ;; .immutable is the proto data
  .upload-data (Brotli.Compress) (| (ToHex) (Log "TEST DATA")) = .immutable

  ; Vec - 0 len
  [0] (Substrate.Encode ["c"]) = .no-refs

  ; Text Plain , vec len 1 vec len 4 (test)
  [0 0 1 4] (Substrate.Encode ["u8" "u8" "c" "c"]) >= .categories
  "test" (StringToBytes) (AppendTo .categories)

  .immutable (Hash.Blake2-256) >= .frag-cid = .fragment-hash

  ;; `references` argument of upload extrinsic
  .no-refs >= .payload ; refs

  ;; `category` argument of upload extrinsic
  .categories (AppendTo .payload) ; categories

  "0x00" (HexToBytes)
  ;; `linked_asset` argument of upload extrinsic
  ; Option None - Linked asset
  (AppendTo .payload)
  ;; `include_cost` argument of upload extrinsic
  ; Option None - Include cost
  (AppendTo .payload)

  ;; `data` argument of upload extrinsic
  [.immutable] (Substrate.Encode [nil]) (AppendTo .payload)

  ;; to compose the V1 Cid, add this prefix to the proto hash: (str "z" (base58 "0x0155a0e40220"))
  "0x0155a0e40220" (HexToBytes) (PrependTo .frag-cid)
  .frag-cid (ToBase58) >= .frag-cid-str
  "z" (PrependTo .frag-cid-str)
  .frag-cid-str (Log "Proto CID")

  .payload (Log)

  ;; .payload is the arguments of the upload extrinsic
  [protos-index upload-index .payload] (Do make-calldata) = .upload-call (| (ToHex) (Log "upload-call"))
  ;; "//Dave" is the private key of an account
  "//Dave" = .frag-owner
  [.frag-owner .upload-call .upload-nonce] (Do send-signed-extrinsic) (Log "upload-call-result")
  [.frag-cid-str .fragment-hash .frag-owner])

(defwire test-patch
  (| (Take 0) (ExpectBytes) = .fragment-hash)
  (| (Take 1) (ExpectInt) = .patch-nonce)
  (| (Take 2) (ExpectInt) = .frag-nonce)

  "0xC0FFEE" (HexToBytes) = .patch-data-bytes
  [.patch-data-bytes] (Substrate.Encode [nil]) >= .patch-data


  .fragment-hash >= .payload
  "0x01" (HexToBytes) (AppendTo .payload)
  [123] (Substrate.Encode ["c"]) (AppendTo .payload)
  "0x00" (HexToBytes) (AppendTo .payload) ; no new refs
  .patch-data (AppendTo .payload)

  .payload (Log)

  [protos-index patch-index .payload] (Do make-calldata) = .patch-call (| (ToHex) (Log "patch-call"))
  ["//Dave" .patch-call .patch-nonce] (Do send-signed-extrinsic) (Log "patch-call-result"))

(defwire test-detach
  (| (Take 0) (ExpectBytes) >= .detach-payload)
  (| (Take 1) (ExpectInt) = .detach-nonce)

  [2] (Substrate.Encode ["u8"]) (AppendTo .detach-payload)

  [20] (Substrate.Encode ["c"]) (AppendTo .detach-payload)
  "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1" (HexToBytes) (AppendTo .detach-payload)

  [protos-index detach-index .detach-payload] (Do make-calldata) = .detach-call (| (ToHex) (Log "detach-call"))
  ["//Dave" .detach-call .detach-nonce] (Do send-signed-extrinsic) (Log "detach-call-result"))

