// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_protos
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-02-22, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/clamor
// benchmark
// --chain=dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet=pallet-protos
// --extrinsic=*
// --steps=50
// --repeat=20
// --heap-pages=4096
// --template=./.maintain/frame-weight-template.hbs
// --output=./pallets/protos/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_protos.
pub trait WeightInfo {
	fn add_upload_auth() -> Weight;
	fn del_upload_auth() -> Weight;
	fn upload() -> Weight;
	fn patch() -> Weight;
	fn detach() -> Weight;
	fn transfer() -> Weight;
}

/// Weights for pallet_protos using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Protos UploadAuthorities (r:1 w:1)
	fn add_upload_auth() -> Weight {
		Weight::from_ref_time(3_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Protos UploadAuthorities (r:1 w:1)
	fn del_upload_auth() -> Weight {
		Weight::from_ref_time(4_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Protos UserNonces (r:1 w:1)
	// Storage: Protos UploadAuthorities (r:1 w:0)
	// Storage: Protos Protos (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Protos ProtosByCategory (r:1 w:1)
	// Storage: Protos ProtosByOwner (r:1 w:1)
	fn upload() -> Weight {
		Weight::from_ref_time(158_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: Protos UserNonces (r:1 w:1)
	// Storage: Protos Protos (r:1 w:1)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Protos UploadAuthorities (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn patch() -> Weight {
		Weight::from_ref_time(162_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Protos Protos (r:1 w:0)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Detach DetachRequests (r:1 w:1)
	fn detach() -> Weight {
		Weight::from_ref_time(8_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Protos Protos (r:1 w:1)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Protos ProtosByOwner (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Protos UploadAuthorities (r:1 w:1)
	fn add_upload_auth() -> Weight {
		Weight::from_ref_time(3_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Protos UploadAuthorities (r:1 w:1)
	fn del_upload_auth() -> Weight {
		Weight::from_ref_time(4_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Protos UserNonces (r:1 w:1)
	// Storage: Protos UploadAuthorities (r:1 w:0)
	// Storage: Protos Protos (r:1 w:1)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	// Storage: Protos ProtosByCategory (r:1 w:1)
	// Storage: Protos ProtosByOwner (r:1 w:1)
	fn upload() -> Weight {
		Weight::from_ref_time(158_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: Protos UserNonces (r:1 w:1)
	// Storage: Protos Protos (r:1 w:1)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Protos UploadAuthorities (r:1 w:0)
	// Storage: unknown [0x3a65787472696e7369635f696e646578] (r:1 w:0)
	fn patch() -> Weight {
		Weight::from_ref_time(162_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: Protos Protos (r:1 w:0)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Detach DetachRequests (r:1 w:1)
	fn detach() -> Weight {
		Weight::from_ref_time(8_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: Protos Protos (r:1 w:1)
	// Storage: Detach DetachedHashes (r:1 w:0)
	// Storage: Protos ProtosByOwner (r:2 w:2)
	fn transfer() -> Weight {
		Weight::from_ref_time(21_000_000 as u64)
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
}
